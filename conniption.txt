conniption
A WebSocket-based framework for creating fast and fun browser games
Designed to be as fast, stable, secure, and extensible as possible.

Features:
	-Packet structures
	-Game Room management
	-Server configuration/logging

Using a client:
connect("fetch") will request a packet, that contains a list of all game rooms.
connect("make") will make a new game and join it.
connect("join") will join the room with the same ID as our roomID variable.

ROOM EVENTS:
-"remove"
-"beforeConnection" - name, passcode, ws, ip
-"afterConnection" - player
-"beforeRemovePlayer" - player
-"afterRemovePlayer" - player
-"start"
-"paused"
-"unpaused"
-"end"
-"logic"

PLAYER EVENTS:
-"remove"
-"kick"
-"ban"
-"lost"
-"found"

-Client Events:
-"connect" - ws, request
-"disconnect" - websocket
-"error" - ws, error
-"fetch" - roomList
-"make" - roomID, timeout
-"join" - id, roomID
-"refused" - message
-"update" - message, array, common
-"reconnect" - player
-"lost" - player
-"ping" - pingArray
-"pong" - null
-"start" - null
-"pause" - null
-"unpause" - null
-"end" - null

To do:
-write whatever few remaining wiki pages need to be made
-put links between the wiki pages, as well as a footer that leads to important topics
-tutorial pages: How to write a server, How to make a Client, etc.
-fix up readme.md
-publish on NPM
-make a new test project and put this to the test!

thoughts for the future:
	-how can a player timing out send more updates about how long they have left to reconnect?
		-this would probably need a new timer in player.lost()
	-how scalable is this exactly, being in one thread?
		-maybe a future update can divide games into their own processes? And the hub just directs messages to the proper game, much like it will have to.
	-remember that future functionality is based entirely on this package... so don't fully deprecate anything
		-also means all names need to stay relevant and accurate to what they describe.
	-how can more language support be added? Maybe... similarly to a config file?
	-make hub connections go over a different port?
		-this would be for a totally different version i think
	-how can I make it so that there will NEVER be identical IDs? I can lower the chance...
	-how can I implement UDP packets in this for a faster game experience?