conniption
A WebSocket-based framework for creating fast and fun browser games
Designed to be as fast, stable, secure, and extensible as possible.

Features:
	-Packet structures
	-Game Room management
	-Server configuration/logging

Use prototypes to add new functions or properties to PlayerCommon, Packet, Room, etc.
OR you can even extend them, yeah?

Make Rooms and Players emit EVENTS! That then can be modified by a user of Conniption...

Using a client:
connect("fetch") will request a packet, that contains a list of all game rooms.
connect("make") will make a new game and join it.
connect("join") will join the room with the same ID as our roomID variable.


To do:
-add gamecommon
	-if you move variables in here, MAKE SURE to update the rest of the files.
-functions for changing progress state of a room? put in gamecommon
	-Game Pause, Game Stop, etc.
-DOCUMENT EVERYTHING!!
-maybe: make players and rooms extend the event class thing? so they can trigger events of their own.

-fill in all them empty functions...
-assess what functionality is missing in this, from the earlier project.
	-look at the old config file
-commands n shit
	-global commands, and commands only usable by a host.
-how to make a player? and how to make the player easily extensible? ooh.
	-how to extend it at all? It has something to do with modifying prototypes, yes?
-how to make an easy client-side framework that can be used in pure JS?
-what exactly will a game based on this, ACTUALLY look like?

ROOM EVENTS:
-"remove"
-"beforeConnection" - name, passcode, ws, ip
-"afterConnection" - player
-"beforeRemovePlayer" - player
-"afterRemovePlayer" - player
-"lostPlayer" - player

PLAYER EVENTS:
-"remove"
-"kick"
-"ban"
-"lost"
-"found"

-PLAYERCOMMON EVENTS:

-GAMECOMMON EVENTS:


thoughts for the future:
	-how can a player timing out send more updates about how long they have left to reconnect?
		-this would probably need a new timer in player.lost()
	-how scalable is this exactly, being in one thread?
		-maybe a future update can divide games into their own processes? And the hub just directs messages to the proper game, much like it will have to.
	-remember that future functionality is based entirely on this package... so don't fully deprecate anything
		-also means all names need to stay relevant and accurate to what they describe.
	-how can more language support be added? Maybe... similarly to a config file?
	-make hub connections go over a different port?
		-this would be for a totally different version i think
	-how can I make it so that there will NEVER be identical IDs? I can lower the chance...
	-how can I implement UDP packets in this for a faster game experience?